package com.tonz.tonzdocs.service;

import com.tonz.tonzdocs.config.JwtUtil;
import com.tonz.tonzdocs.dto.LoginRequest;
import com.tonz.tonzdocs.dto.RegisterRequest;
import com.tonz.tonzdocs.model.Role;
import com.tonz.tonzdocs.model.School;
import com.tonz.tonzdocs.model.User;
import com.tonz.tonzdocs.repository.MajorRepository;
import com.tonz.tonzdocs.repository.RoleRepository;
import com.tonz.tonzdocs.repository.SchoolRepository;
import com.tonz.tonzdocs.repository.UserRepository;
import io.jsonwebtoken.JwtException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.*;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.time.Duration;
import java.util.Collections;
import java.util.Map;
import java.util.Optional;

@Service
public class AuthService {

    @Autowired private UserRepository userRepo;
    @Autowired private PasswordEncoder passwordEncoder;
    @Autowired private RoleRepository roleRepo;
    @Autowired private SchoolRepository schoolRepo;
    @Autowired private MajorRepository majorRepo;

    @Autowired private JwtUtil jwtUtil;
    @Autowired private UploadService uploadService; // üëà d√πng service c√≥ s·∫µn c·ªßa b·∫°n

    /* =========================================================
     * LOGIN: tr·∫£ v·ªÅ { token, refreshToken } + (t√πy ch·ªçn) set cookie refreshToken (HttpOnly)
     * Frontend hi·ªán t·∫°i c·ªßa b·∫°n mong nh·∫≠n { token, refreshToken } v√† s·∫Ω t·ª± set accessToken v√†o cookie/js-cookie
     * ========================================================= */
    public ResponseEntity<?> login(LoginRequest request) {
        Optional<User> userOpt = userRepo.findByEmail(request.getEmail());

        // Kh√¥ng t√¨m th·∫•y email
        if (userOpt.isEmpty()) {
            return ResponseEntity.ok(Map.of(
                    "ok", false,
                    "code", "USER_NOT_FOUND",
                    "message", "T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i"
            ));
        }

        User user = userOpt.get();

        // Sai m·∫≠t kh·∫©u
        if (!passwordEncoder.matches(request.getPassword(), user.getPassword())) {
            return ResponseEntity.ok(Map.of(
                    "ok", false,
                    "code", "INVALID_PASSWORD",
                    "message", "M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng"
            ));
        }

        // T√†i kho·∫£n b·ªã kh√≥a
        if (!user.isActive()) {
            return ResponseEntity.ok(Map.of(
                    "ok", false,
                    "code", "ACCOUNT_LOCKED",
                    "message", "T√†i kho·∫£n ƒë√£ b·ªã kh√≥a"
            ));
        }

        // ƒêƒÉng nh·∫≠p th√†nh c√¥ng
        String token = jwtUtil.generateToken(user.getEmail());
        String refreshToken = jwtUtil.generateRefreshToken(user.getEmail());

        return ResponseEntity.ok(Map.of(
                "ok", true,
                "token", token,
                "refreshToken", refreshToken
        ));
    }


    /* =========================================================
     * REFRESH TOKEN: ƒë·ªçc refresh t·ª´ cookie (∆∞u ti√™n) ho·∫∑c Authorization: Bearer <refresh>
     * Tr·∫£ v·ªÅ { token, refreshToken } (c√≥ rotate refresh) + set l·∫°i cookie
     * ========================================================= */
    public ResponseEntity<?> refreshToken(String refreshCookie, String authHeader) {
        // L·∫•y refresh t·ª´ cookie, n·∫øu kh√¥ng c√≥ th√¨ th·ª≠ t·ª´ Bearer
        String refresh = refreshCookie;
        if ((refresh == null || refresh.isBlank()) && authHeader != null && authHeader.startsWith("Bearer ")) {
            refresh = authHeader.substring(7);
        }
        if (refresh == null || refresh.isBlank()) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
                    .body(Collections.singletonMap("message", "Missing refresh token"));
        }

        try {
            // L·∫•y email t·ª´ refresh & ki·ªÉm tra user c√≤n active
            String email = jwtUtil.extractEmailFromRefresh(refresh);
            User user = userRepo.findByEmail(email)
                    .orElseThrow(() -> new RuntimeException("User not found"));

            if (!user.isActive()) {
                return ResponseEntity.status(HttpStatus.FORBIDDEN)
                        .body(Collections.singletonMap("error", "T√†i kho·∫£n ƒë√£ b·ªã kh√≥a"));
            }

            // C·∫•p token m·ªõi (rotate refresh ƒë·ªÉ an to√†n)
            String newAccess  = jwtUtil.generateAccessToken(user.getEmail());
            String newRefresh = jwtUtil.generateRefreshToken(user.getEmail());

            ResponseCookie newRefreshCookie = ResponseCookie.from("refreshToken", newRefresh)
                    .httpOnly(true)
                    .secure(false)        // ‚ö†Ô∏è production HTTPS -> true
                    .sameSite("Lax")      // ‚ö†Ô∏è kh√°c domain -> "None" + secure(true)
                    .path("/")
                    .maxAge(Duration.ofDays(7))
                    .build();

            return ResponseEntity.ok()
                    .header(HttpHeaders.SET_COOKIE, newRefreshCookie.toString())
                    .body(Map.of(
                            "token", newAccess,
                            "refreshToken", newRefresh
                    ));
        } catch (JwtException ex) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
                    .body(Collections.singletonMap("message", "Invalid refresh token"));
        }
    }

    /* =========================================================
     * REGISTER gi·ªØ nguy√™n (ch·ªâ tidy nh·∫π)
     * ========================================================= */
    public ResponseEntity<?> register(RegisterRequest request, MultipartFile avatar) {
        if (userRepo.findByEmail(request.getEmail()).isPresent()) {
            return ResponseEntity.status(HttpStatus.CONFLICT)
                    .body(Collections.singletonMap("error", "Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng"));
        }

        User user = new User();
        user.setEmail(request.getEmail());
        user.setName(request.getName());
        user.setPassword(passwordEncoder.encode(request.getPassword()));
        user.setActive(true);

        Role role = roleRepo.findById(request.getRoleId())
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y role v·ªõi ID: " + request.getRoleId()));
        user.setRole(role);

        if (request.getSchoolId() != null) {
            School school = schoolRepo.findById(request.getSchoolId())
                    .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y tr∆∞·ªùng h·ªçc v·ªõi ID: " + request.getSchoolId()));
            user.setSchool(school);
        }
        if (request.getMajorId() != null) {
            majorRepo.findById(request.getMajorId()).ifPresent(user::setMajor);
        }

        // L∆∞u l·∫ßn 1 ƒë·ªÉ c√≥ userId
        userRepo.save(user);

        // N·∫øu c√≥ file avatar -> upload Cloudinary & update URL
        if (avatar != null && !avatar.isEmpty()) {
            try {
                String publicId = "user_" + user.getUserId(); // d·ªÖ overwrite khi update
                String secureUrl = uploadService.uploadAvatar(avatar, publicId);
                user.setAvatarUrl(secureUrl);
                userRepo.save(user); // update URL
            } catch (IOException ex) {
                // Kh√¥ng fail ƒëƒÉng k√Ω v√¨ upload l·ªói; c√≥ th·ªÉ log warning n·∫øu mu·ªën
                // log.warn("Upload avatar failed", ex);
            }
        } else if (request.getAvatarUrl() != null && !request.getAvatarUrl().isBlank()) {
            // Tr∆∞·ªùng h·ª£p FE ƒë√£ c√≥ s·∫µn link (√≠t d√πng khi ƒë√£ upload qua server)
            user.setAvatarUrl(request.getAvatarUrl().trim());
            userRepo.save(user);
        }

        return ResponseEntity.ok(Collections.singletonMap("message", "ƒêƒÉng k√Ω th√†nh c√¥ng!"));
    }

    // üëá NEW: helper t·∫°o Gravatar URL (identicon) theo email
    private String buildGravatarUrl(String email) {
        try {
            String normalized = (email == null ? "" : email.trim().toLowerCase());
            MessageDigest md = MessageDigest.getInstance("MD5");
            byte[] digest = md.digest(normalized.getBytes(StandardCharsets.UTF_8));
            StringBuilder sb = new StringBuilder();
            for (byte b : digest) sb.append(String.format("%02x", b));
            String hash = sb.toString();
            // d=identicon: avatar t·ª± sinh; s=160: k√≠ch th∆∞·ªõc
            return "https://www.gravatar.com/avatar/" + hash + "?d=identicon&s=160";
        } catch (Exception e) {
            // fallback: generic avatar
            return "https://www.gravatar.com/avatar/?d=mp&s=160";
        }
    }
}
